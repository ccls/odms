= CCLS Operations and Data Management System






== Rails 3 Upgrade Modifications

So many things have changed from 2 to 3 and not all are good.  

Perhaps I should have stepped into this Rails 3.0, 3.1 then 3.2?
Then would've seen deprecation warnings?


No more "errors.on(:field_name)" which was actually a built in rails staple!
-	Rewrote it myself
... but should remove? Isn't hurting anyone.
- modified tests to use .includes? instead


Our Context[...] model causes this ...
ActionView::Template::Error: undefined method `[]' for ActionView::Context:Module
Added :: prefix where I use it to see if makes a difference


* all of my custom validations have been converted and seem to work now
	* validates_complete_date_for
	* validates_past_date_for
	* validates_absence_of
* copy /lib/active_model/validations/presence.rb for use with absence.rb

* move my action_view/base.rb into helper
* config/initializers/action_view_extension/base.rb to simple helper

* no more 'redirected_to' test method? NoMethodError: undefined method `redirected_to' for #<ActionController::TestResponse:0x10c01d120>


* custom error messages in my custom validators


Some feature are just gone, like error types so cannot use my on_attr_and_type test!
Will have to compare error message with match or something.
No more ActiveRecord::Error so need to do something in my validation.


* change all of my form_link_to's to button_to's

* change all of my destroy_link_to's to button_to's (think that I have some javascript attached to these so add class-'destroy_link_to')
  * don't know if i can as button_to doesn't accept hidden field parameters


* write replacement for f.error_messages (wrote, but need to implement)

No more form f.error_messages in rails 3 so I'll need to do something there.
Build my own helper that creates something like ...

<div class="errorExplanation" id="errorExplanation">
<h2>5 errors prohibited this study subject from being saved</h2>
<p>There were problems with the following fields:</p>
<ul>
<li>No sex has been chosen.</li>
<li>Date of birth can't be blank.</li>
<li>Admit date can't be blank</li>
<li>Diagnosis can't be blank</li>
<li>Hospital record number can't be blank.</li>
</ul>
</div>

    <div id="error_explanation">
      <h2><%= pluralize(@post.errors.count, "error") %> prohibited this post from being saved:</h2>

      <ul>
      <% @post.errors.full_messages.each do |msg| %>
        <li><%= msg %></li>
      <% end %>
      </ul>
    </div>

These ONLY show up with full messages.
Use locales or HUMANIZED ATTRIBUE NAME to convert things like ...
	dob to Date of birth
	hospital_no to Hospital record number

irb(main):012:0> s.errors.full_messages
=> ["Subject type can't be blank", "Sex has not been chosen", "Date of birth can't be blank"]

irb(main):011:0> s.errors.full_message(:dob,"can't be blank")
=> "Date of birth can't be blank"

* gonna need to figure out this SSL thing so that all environments work
  * I may not need to do anything except remove stuff
  * production server forces https
  * adding config.force_ssl to application.rb is supposed to do this
  * then I can remove all kinds of stuff
  * add config.force_ssl, but no tests actually prove this.
  * relying on production server to enforce SSL

* rake db:load:fixtures with csv files (works in testing)
  * CSV Fixtures are deprecated and support will be removed in Rails 3.2.0. !!!!
  * rake db:load:fixtures does not work for csv files????
  * the rake task supports csv, but ActiveRecord apparently does not, even though all the documentation still says it does.
  * manually importing with own rake tasks now

* json output format no longer has the initial key.
  * can change this by modifying application.rb
  * config.active_record.include_root_in_json = false

* missing subject_race_id and subject_language_id in selectors probably from new form of fields_for
  * Done

* surprised my home computer tested without a config/api.yml ??
  * removing api controllers

* integration tests running

* fix all search code
  * Remove GiftCardSearch as it is not used
  * Try to remove AbstractSearch if possible
  * remove OperationalEvent.seach
    * app/models/abstract.rb - removed
    * app/models/gift_card.rb - removed










































== Rails 3 Upgrade TODOs

* (20120316a) 7886 tests, 18416 assertions, 907 failures, 1439 errors
* (20120316b) 7849 tests, 17906 assertions, 166 failures, 2043 errors
* (20120317a)
* ODMS-rake-test-20120317a.txt:4650 tests, 11589 assertions, 42 failures, 180 errors
* ODMS-rake-test-20120317a.txt:2867 tests, 11028 assertions, 77 failures, 122 errors
* ODMS-rake-test-20120317a.txt:224 tests, 499 assertions, 0 failures, 224 errors
* (20120318a)
* ODMS-rake-test-20120318a.txt:4579 tests, 11654 assertions, 14 failures, 88 errors
* ODMS-rake-test-20120318a.txt:2867 tests, 11046 assertions, 77 failures, 104 errors
* ODMS-rake-test-20120318a.txt:224 tests, 499 assertions, 0 failures, 224 errors
* (20120318b)
* ODMS-rake-test-20120318b.txt:4581 tests, 11662 assertions, 14 failures, 81 errors
* ODMS-rake-test-20120318b.txt:2867 tests, 11178 assertions, 77 failures, 77 errors
* ODMS-rake-test-20120318b.txt:224 tests, 2827 assertions, 47 failures, 0 errors
* (20120318c)
* ODMS-rake-test-20120318c.txt:4581 tests, 11662 assertions, 14 failures, 81 errors
* ODMS-rake-test-20120318c.txt:2867 tests, 11238 assertions, 69 failures, 49 errors
* ODMS-rake-test-20120318c.txt:224 tests, 2810 assertions, 41 failures, 6 errors
* (20120318d) 7672 tests, 25642 assertions, 305 failures, 143 errors
* (20120319)  7682 tests, 27538 assertions, 147 failures, 25 errors
* (20120319)  7678 tests, 27383 assertions, 133 failures, 25 errors

* going in the wrong direction now?
* (20120319)  7643 tests, 24321 assertions, 134 failures, 233 errors
* now we're getting somewhere
* (20120320)  7615 tests, 27293 assertions, 19 failures, 5 errors



  4) Failure:
test_should_order_sub_pages_with_administrator_login(PagesControllerTest) [/test/functional/pages_controller_test.rb:133]:
<[1, 2, 3]> expected but was
<[1, 2, 2]>.

















PRIORITY

* remove User.search 
* remove StudySubject.search on projects

* debug integration tests

* integration tests passing
* all tests passing
* ZipCode failures??
* fix all search code
  * searching is not terribly important, but does need to work
  * the following have some type of homemade 'search' method that will NEED updated
    * app/models/study_subject.rb
    * app/models/operational_event.rb
      * events_path, although don't know why (probably just sorting)
    * app/models/user.rb
      * only appears to search on role name in users controller 
      * "users_path( :role_name => role_name )"
* default_scopes mucks up searching in rails 3
  * they take precedence over the request? seems backwards
  * remove them all??

* rake test:coverage

* resolve all pending tests

* resolve all commented out tests

* reenable raising mass assignment error in environments/test.rb

* re-enable ccls-html_test for validation (incompatible with rails 3?)

* change functional tests to only include fields on the forms















* paths not available in new helper tests?? ( so commented out those tests )
  * NameError: undefined local variable or method `dashboard_study_subjects_path' for #<ApplicationHelperTest:0x362afa4>

* fix user not logged in integration test.

* controllers now raises MassAssignmentSecurity::Error
  * add a rescue to ignore it
  * only raises in dev and test, so no rescue
	*	I could simply remove this ... but seems scandalous
	# Raise exception on mass assignment protection for Active Record models
	config.active_record.mass_assignment_sanitizer = :strict
	* I'd rather just silently ignore, but probably shouldn't

* datetime still accept partial? was some mention of error when not complete
  * think that there is some setting 

* remove soon to be deprecate code




* http://stackoverflow.com/questions/3953757/rails-3-how-do-i-define-activemodel-translations-for-several-attributes
* put all of my custom error message in locale file like above???


* catch-all page path route string not array

*	get acts_as_list working (actually seems to work fine.  tests don't though)
  * include acts_as_list functionality
  * don't really use acts_as_list functionality much


* Have to find new way for custom error messages, AGAIN without attribute name

* humanized versions of attributes for now


* Not all of my rails2 routes are reproducable in rails3.  Do I NEED them? Doesn't appear so.
  admin_path ... can't seem to define the path to pass other stuff to route?


* assert_difference always seems to fail as the Model.count doesn't change even on successfull creation.
  Was happening for ZipCode


* Would probably be much better if I could remove all of my custom mods, but I'll probably have to add more.

* implement the user_roles helper tests in the users_controller?

* remove any unused code

* put fake_sessions#new view into controller rather than separate file?
* put FakeSessionsController into the Capybara test helper rather than separate file?


* The test error messages could use the key in the translator rather that the text itself???
  * not 100% as some message include variable for interpolation
  * irb(main):011:0> I18n.t('errors.messages.blank')
  * => "can't be blank"


* merge all previously separate css files
  * ccls_engine
  * common_lib

* Keep or Remove HomexOutcome and custom HomeExposure callbacks????

* It seems that the test database doesn't completely clean itself before each test.
  * This results in the count comparisons being way off.
  * when its clean, some of these tests actually work?
 






173) Failure:
test_should_order_sub_pages_with_superuser_login(PagesControllerTest) [/test/functional/pages_controller_test.rb:133]:
--- expected
+++ actual
@@ -1 +1 @@
-<[1, 2, 3]>
+<[1, 2, 2]>



210) Failure:
test_should_NOT_order_by_bogus_column(StudySubjectSearchTest) [/test/unit/study_subject_search_test.rb:452]:
211) Failure:
test_should_NOT_order_by_bogus_column_with_dir(StudySubjectSearchTest) [/test/unit/study_subject_search_test.rb:446]:
212) Error:
test_should_include_study_subject_by_project_indifferent_completed(StudySubjectSearchTest):
ActiveRecord::RecordInvalid: Validation failed: Completed on is in the future and must be in the past
    /test/unit/study_subject_search_test.rb:172:in `test_should_include_study_subject_by_project_indifferent_completed'

213) Failure:
test_should_include_study_subject_by_project_is_candidate(StudySubjectSearchTest) [/test/unit/study_subject_search_test.rb:354]:
<false> is not true.

214) Failure:
test_should_include_study_subject_by_project_is_chosen(StudySubjectSearchTest) [/test/unit/study_subject_search_test.rb:390]:
<false> is not true.

215) Failure:
test_should_include_study_subject_by_project_is_closed(StudySubjectSearchTest) [/test/unit/study_subject_search_test.rb:244]:
<false> is not true.

216) Error:
test_should_include_study_subject_by_project_is_completed(StudySubjectSearchTest):
ActiveRecord::RecordInvalid: Validation failed: Completed on is in the future and must be in the past
    /test/unit/study_subject_search_test.rb:201:in `test_should_include_study_subject_by_project_is_completed'

217) Error:
test_should_include_study_subject_by_project_is_consented(StudySubjectSearchTest):
NameError: undefined local variable or method `study_subject' for #<StudySubjectSearchTest:0x8636b38>
    /test/active_support_extension/test_case.rb:232:in `method_missing_without_pluralization'
    /test/factory_test_helper.rb:197:in `method_missing'
    /test/unit/study_subject_search_test.rb:320:in `test_should_include_study_subject_by_project_is_consented'

218) Failure:
test_should_include_study_subject_by_project_is_eligible(StudySubjectSearchTest) [/test/unit/study_subject_search_test.rb:430]:
<false> is not true.

219) Error:
test_should_include_study_subject_by_project_is_terminated(StudySubjectSearchTest):
NameError: undefined local variable or method `study_subject' for #<StudySubjectSearchTest:0x8636ac0>
    /test/active_support_extension/test_case.rb:232:in `method_missing_without_pluralization'
    /test/factory_test_helper.rb:197:in `method_missing'
    /test/unit/study_subject_search_test.rb:282:in `test_should_include_study_subject_by_project_is_terminated'

220) Error:
test_should_include_study_subject_by_project_not_completed(StudySubjectSearchTest):
ActiveRecord::RecordInvalid: Validation failed: Completed on is in the future and must be in the past
    /test/unit/study_subject_search_test.rb:187:in `test_should_include_study_subject_by_project_not_completed'

227) Failure:
test_should_order_by_first_name_asc(StudySubjectSearchTest) [/test/unit/study_subject_search_test.rb:517]:
--- expected
+++ actual
@@ -1 +1 @@
-<3>
+<8>

228) Failure:
test_should_order_by_first_name_asc_by_default(StudySubjectSearchTest) [/test/unit/study_subject_search_test.rb:510]:
--- expected
+++ actual
@@ -1 +1 @@
-<3>
+<8>

229) Failure:
test_should_order_by_first_name_desc(StudySubjectSearchTest) [/test/unit/study_subject_search_test.rb:524]:
--- expected
+++ actual
@@ -1 +1 @@
-<3>
+<8>

230) Failure:
test_should_order_by_id_asc(StudySubjectSearchTest) [/test/unit/study_subject_search_test.rb:488]:

231) Failure:
test_should_order_by_id_asc_by_default(StudySubjectSearchTest) [/test/unit/study_subject_search_test.rb:481]:

232) Failure:
test_should_order_by_id_desc(StudySubjectSearchTest) [/test/unit/study_subject_search_test.rb:495]:























== Development Notes

As this code is stored in publicly accessible repositories,
DO NOT UNDER ANY CIRCUMSTANCES PUT ANY REAL SUBJECT DATA IN THE CODE!

The models in this gem are stored in a shared database, therefore, the migrations
that create and modify it, as well as the ActiveRecord models that use it must
reflect this.  Currently, the models which are normally subclasses of ActiveRecord::Base
need to now by subclasses of ActiveRecordShared.  The migrations, normally subclasses 
of ActiveRecord::Migration, need to be subclasses of SharedMigration.



Several errors I get on my MacBook when running rake test:coverage that I don't get running autotest,
  I also don't get these on my Mac Pro ???

  (See full trace by running task with --trace)
  jake@mbp-3 : ccls_engine 555> ruby -v
  ruby 1.8.7 (2010-08-16 patchlevel 302) [i686-darwin9.8.0]

  ArgumentError: wrong number of arguments (1 for 0)
    app/models/search.rb:183:in `flatten'
    app/models/search.rb:183:in `having_options'
    app/models/search.rb:175:in `having'
    app/models/study_subject_search.rb:46:in `study_subjects'

  ArgumentError: odd number of arguments for Hash
    app/models/abstract.rb:301:in `[]'
    app/models/abstract.rb:301:in `comparable_attributes'
    app/models/abstract.rb:309:in `diff'
    app/models/abstract.rb:305:in `is_the_same_as?'

  Ccls/Pii should return join of mother's name: .
  DEPRECATION WARNING: String#chars has been deprecated in favor of String#mb_chars. (called from initials at /Users/jake/github_repo/ccls/ccls_engine/app/models/pii.rb:57)

  test_@@_should_get_new_with_superuser_login(Ccls::RefusalReasonsControllerTest):
  ActionView::TemplateError: undefined method `find_index' for [:code]:Array
    On line #4 of app/views/refusal_reasons/_form.html.erb



===Some general ActiveRecord model notes:

Don't have validations that could raise errors that the user can't do anything about.

When using validates_presence_of, use allow_blank => true on other validations to avoid multiple errors if blank.

When validating the presence of associations, validate on foreign key rather than association so that the error shows up correctly in view.  Unfortunately, this will not guarantee that an association actually exists with that id as it would if the validation was on the association.

 validates_presence_of :project ( will not raise error on project_id so in the view, the project_id selector won't have an error and so won't be highlighted like other errors will be.)
 validates_presence_of :project_id ( will not ensure that an actual project for the given id exists, but will show the error correctly in the view. )

 I would like to have a validation that ensures that the _id is legitimate.  I do not think that validates_associated is what I want.  Having the both does what I want, but then the view will show "Project is blank" twice.


This seems to work ...
 validates_presence_of :project, :if => :project_id
 validates_presence_of :project_id
... but is a bit of a misnomer.  The association validation will raise a 'blank' error, rather than a more appropriate 'non-existant' error, although the message could be altered.


Still some models and associations may need done due to priorities and the fact that some never end up in a view and the association may be problematic. (Aliquot,HomexOutcome,Patient)


===Some general ActiveSupport::TestCase unit test notes:

Most, if not all, of the 'class level' assertions are defined in ccls-common_lib.
They call 'create_object', which, unless explicitly defined, is handled in a
method_missing handler which extracts the model name from the testing class
and uses the factory of the same name.  (ie. AbstractTest -> Factory(:abstract) )
In addition, this same method missing handler is used for handling undefined 
methods like 'create_abstract'.  The handler takes this method which 
matches /create_(.*)/ and calls a Factory($1)

Also note, create_object only works in unit tests as they are generally associated
with a particular model.  Controllers, on the other hand, do not share this
privilege as they are not.  The create_MODEL_NAME technique does still work.

These create_* methods call Factory.build and then save.
This is predominantly because by default Factory uses create! which raises
errors rather than returning false which makes testing the error difficult.
I think that there is a way to set the "default_strategy" for factory_girl,
but I've yet to figure that out.





== Additional files that will be needed

 /config/api.yml
 /config/database.yml
 /config/initializers/mail.rb
 /config/initializers/secret_token.rb
 /config/s3.yml

== Testing requirements

* port qt4-mac
* gem webkit (not used anymore)
* gem capybara
* gem selenium-webdriver (not used anymore)
* gem capybara-webkit

== Notes 

 Be advised that some of the integration tests will intermittantly
 fail due to their threaded nature.  I've added several 'sleep 1'
 lines to deal with this, but it isn't always enough.  They will 
 pass if given enough wait time. This is mostly noticed when 
 clicking a link or button and then expecting a change in the
 database.  Sometimes there is none when there should be and
 then the assert_difference fails.  I have changed the 'sleep 1'
 to 'sleep 2' in the places where this commonly happens to 
 try to avoid it.  As this behaviour is intermittant, it is a
 bit difficult to debug.


Copyright (c) 2011 [Jake Wendt], released under the MIT license
