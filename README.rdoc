= CCLS Operations and Data Management System


 #	Starting from scratch?
 
 #	drop existing dev db
 mysqladmin -u root drop odms_development
 
 #	create new empty dev db
 mysqladmin -u root create odms_development
 
 rake db:migrate
 
 #	Install most test fixtures in database
 rake app:update
 
 #	OR Install zip_code and county csv fixtures in database (takes a while)
 #	( this will do app:update as well )
 rake app:full_update
 
 #	Add expected users and roles (after roles are loaded)
 rake app:users:add_default
 
 #	Install "production" pages and guides (as of Mar 12, 2012)
 rake db:fixtures:load FIXTURES_PATH=production/fixtures/ FIXTURES=pages,guides 
 
 
 
 #
 #			gotta add document_versions.csv somewhere
 #
 
 
 
 
 #	Dump database table descriptions
 rake db:describe



















== Rails 3 Upgrade Modifications

No more ActiveRecord::Error and therefore no error :type which destroys my test method
No more f.error_messages

Our Context \[ ... \] model method causes this ...
ActionView::Template::Error: undefined method `[]' for ActionView::Context:Module
Added \:\: prefix where I use it to see if makes a difference

Rewrite my custom validations

CSV Fixtures are deprecated and support will be removed in Rails 3.2.0. !!!!

json default output format no longer has the initial root key.
config.active_record.include_root_in_json = false























== Rails 3 Upgrade TODOs



PRIORITY



I'll need to check on this, but for live_birth_date and icf_master_tracker updates, I do assign both the url and the path

Post-install message from paperclip:
##################################################
#  NOTE FOR UPGRADING FROM PRE-3.0 VERSION       #
##################################################

Paperclip 3.0 introduces a non-backward compatible change in your attachment
path. This will help to prevent attachment name clashes when you have
multiple attachments with the same name. If you didn't alter your
attachment's path and are using Paperclip's default, you'll have to add
`:path` and `:url` to your `has_attached_file` definition. For example:

    has_attached_file :avatar,
      :path => ":rails_root/public/system/:attachment/:id/:style/:filename",
 \     :url => "/system/:attachment/:id/:style/:filename"


* autotest now hangs on my work computer??
  * works on my old laptop at home
  * works on other apps
  * so what happened around March 25th ?



* live_birth_data_update and icf_master_tracker_updates aren't always being deleted in testing
  * may just be when there are errors.  unfortunately it can leave a mess.
  * hmmm

* rake test:coverage

* resolve all pending tests

* resolve all commented out tests

* change functional tests to only include fields on the forms

* Is there a way to save without callbacks?
  * could be very useful in testing?
  * really trying to simplify all the testing as there are so many things that trigger other things.  It is becoming difficult to test.  Add one callback that creates something and all of the sudden 100 tests fail because some count is now off by 1.

* fix user not logged in integration test.  current_url doesn't seem to match followed redirect. Also in CaseIntegrationTest

* fix all integration test "sleep" issues

* remove all method_missings from app and write explicit ones
  * may_*_required
  * create_* ( if possible )

* don't create database record in tests unless necessary.  just build.

* reenable raising mass assignment error in environments/test.rb
* controllers now raises MassAssignmentSecurity::Error
  * add a rescue to ignore it
  * only raises in dev and test, so no rescue
	*	I could simply remove this ... but seems scandalous
	* Raise exception on mass assignment protection for Active Record models
	* config.active_record.mass_assignment_sanitizer = :strict
	* I'd rather just silently ignore, but probably shouldn't

* datetime still accept partial? was some mention of error when not complete
  * think that there is some setting 

* remove soon to be deprecated code

* implement the user_roles helper tests in the users_controller?

* remove any unused code

* Keep or Remove HomexOutcome and custom HomeExposure callbacks????

* fix assert_no_route test (doesn't work with assets.enabled)
  * perhaps I can temporarily disable the assets pipeline?
    * No, it doesn't appear so


* database access seems MUCH slower in Rails 3.
  * modifying many tests to try to not actually use the database.


* begin taking advantage of the asset pipeline for merging js and css
  * baby steps using the manifest
  * http://guides.rubyonrails.org/asset_pipeline.html



* make extract_fixtures_from rake task sort model attributes somehow











== Rails 3 Notes

=== Custom Error messaging

Due to our desire to have custom error messages, it was simplest to change the config/locales/en.yml file, which is used for the error messages to change the default format from "%{attribute} %{message}" to just "%{message}" and then add the "%{attribute}" for most and leave it out otherwise.  A bit of a pain in the butt, but certainly effective.  That being said, anytime a special error is explicitly added using something like "errors.add(:some_attribute,'my custom message')", the custom message must include the attribute if desired as the system will not add it.  This is actually working quite well.



=== Don't pass "method => :delete" to link_to anymore

This will create links like ...

<a href="/icf_master_tracker_updates/5806" class="button" data-confirm="Are you sure?" data-method="delete" rel="nofollow">Destroy</a></td>

which contain a number of extra attributes.  These extra attributes are not valid html. They are meant to be used by javascript confirmation, but they are still not valid html.  So, since I'm not using them, I'll replace these links with forms like the others.


=== Record Querying with ActiveRecord Relation and AREL

http://railscasts.com/episodes/202-active-record-queries-in-rails-3

http://railscasts.com/episodes/215-advanced-queries-in-rails-3

http://railscasts.com/episodes/239-activerecord-relation-walkthrough


This is looking good.

 def self.no_change_in_query(*args)
  scoped	#	just return scoped to do nothing apparently
 end


Repeated joins seem to be ignored.  Yay!

 > User.joins(:roles).joins(:roles).joins(:roles).joins(:roles).joins(:roles).joins(:roles).to_sql
 => "SELECT `users`.* FROM `users` INNER JOIN `roles_users` ON `roles_users`.`user_id` = `users`.`id` INNER JOIN `roles` ON `roles`.`id` = `roles_users`.`role_id`"



 def self.with_role_name(role_name=nil)
  ( role_name.blank? ) ? scoped :
   joins(:roles).where("roles.name".to_sym => role_name)
 end


=== DO NOT USE DEFAULT_SCOPE

I do not like this as it takes precedence over your search unless you add 'unscoped' to your chain.  It has caused me much grief.  It caused grief with acts_as_list not properly scoping.  It caused gried with my ZipCode limit not destroying all when I told it to destroy_all because it had "limit(10)" as part of its default_scope.  Conclusion.  DO NOT USE DEFAULT_SCOPE.











== Development Notes

As this code is stored in publicly accessible repositories,
DO NOT UNDER ANY CIRCUMSTANCES PUT ANY REAL SUBJECT DATA IN THE CODE!

















===Some general ActiveRecord model notes:

Don't have validations that could raise errors that the user can't do anything about.

When using validates_presence_of, use allow_blank => true on other validations to avoid multiple errors if blank.

When validating the presence of associations, validate on foreign key rather than association so that the error shows up correctly in view.  Unfortunately, this will not guarantee that an association actually exists with that id as it would if the validation was on the association.

 validates_presence_of :project ( will not raise error on project_id so in the view, the project_id selector won't have an error and so won't be highlighted like other errors will be.)
 validates_presence_of :project_id ( will not ensure that an actual project for the given id exists, but will show the error correctly in the view. )

I would like to have a validation that ensures that the _id is legitimate.  I do not think that validates_associated is what I want.  Having the both does what I want, but then the view will show "Project is blank" twice.


This seems to work ...
 validates_presence_of :project, :if => :project_id
 validates_presence_of :project_id
... but is a bit of a misnomer.  The association validation will raise a 'blank' error, rather than a more appropriate 'non-existant' error, although the message could be altered.


Still some models and associations may need done due to priorities and the fact that some never end up in a view and the association may be problematic. (Aliquot,HomexOutcome,Patient)


===Some general ActiveSupport::TestCase unit test notes:

Most, if not all, of the 'class level' assertions are defined in ccls-common_lib.
They call 'create_object', which, unless explicitly defined, is handled in a
method_missing handler which extracts the model name from the testing class
and uses the factory of the same name.  (ie. AbstractTest -> Factory(:abstract) )
In addition, this same method missing handler is used for handling undefined 
methods like 'create_abstract'.  The handler takes this method which 
matches /create_(.*)/ and calls a Factory($1)

Also note, create_object only works in unit tests as they are generally associated
with a particular model.  Controllers, on the other hand, do not share this
privilege as they are not.  The create_MODEL_NAME technique does still work.

These create_* methods call Factory.build and then save.
This is predominantly because by default Factory uses create! which raises
errors rather than returning false which makes testing the error difficult.
I think that there is a way to set the "default_strategy" for factory_girl,
but I've yet to figure that out.





== Additional files that will be needed

 /config/api.yml ( probably removing )
 /config/database.yml
 /config/initializers/mail.rb
 /config/initializers/secret_token.rb
 /config/s3.yml ( will be storing uploads locally )

== Testing requirements

* port qt4-mac
* gem webkit (not used anymore)
* gem capybara
* gem selenium-webdriver (not used anymore)
* gem capybara-webkit

== Notes 

Be advised that some of the integration tests will intermittantly
fail due to their threaded nature.  I've added several 'sleep 1'
lines to deal with this, but it isn't always enough.  They will 
pass if given enough wait time. This is mostly noticed when 
clicking a link or button and then expecting a change in the
database.  Sometimes there is none when there should be and
then the assert_difference fails.  I have changed the 'sleep 1'
to 'sleep 2' in the places where this commonly happens to 
try to avoid it.  As this behaviour is intermittant, it is a
bit difficult to debug.


Copyright (c) 2011 [Jake Wendt], released under the MIT license
